# name: Deploy to App Tester
# on:
#   pull_request:
#     branches:
#       - 'main'
#   push:
#     tags:
#       - 'ios*.*.*'

# jobs:
#   build-ios:
#     runs-on: macos-latest
#     steps:
#       - uses: actions/checkout@v1
#       - uses: cedvdb/action-flutter-build-ios@v1
#         with:
#           # always use --export-options-plist=ios/GithubActionsExportOptions.plist
#           build-cmd: flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist
#           certificate-base64: ${{secrets.IOS_BUILD_CERTIFICATE_BASE64}}
#           certificate-password: ${{secrets.IOS_BUILD_CERTIFICATE_PASSWORD}}
#           provisioning-profile-base64: ${{secrets.IOS_MOBILE_PROVISIONING_PROFILE_BASE64}}
#           keychain-password: ${{secrets.IOS_GITHUB_KEYCHAIN_PASSWORD}}
#       - name: Archive IPA
#         uses: actions/upload-artifact@v2
#         with:
#           name: ci_cd.ipa
#           path: build/ios/ipa/ci_cd.ipa
#   distribute-ios:
#     needs: build-ios
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/download-artifact@v2
#         with:
#           name: ci_cd.ipa
#       - name: upload artifact to Firebase App Distribution
#         uses: wzieba/Firebase-Distribution-Github-Action@v1
#         with:
#           appId: ${{secrets.FIREBASE_IOS_APP_ID}}
#           serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
#           groups: testers
#           file: ci_cd.ipa

name: Deploy to App Tester
on:
  pull_request:
    branches:
      - 'main'
  push:
    tags:
       - 'ios*.*.*'
jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_BUILD_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILE_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_GITHUB_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Flutter get
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.3.7'

      - run: flutter pub get

      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist
          
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
         name: ci_cd
         path: build/ios/ipa/ci_cd.ipa
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  release:
    name: Release ipa to Firebase
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
    - name: Get ci_cd from artifacts
      uses: actions/download-artifact@v2
      with:
        name: ci_cd

    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
        serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
        groups: testers
        file: ci_cd.ipa